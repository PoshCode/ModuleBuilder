<#PSScriptInfo

.VERSION 4.0.6

.GUID 6083ddaa-3951-4482-a9f7-fe115ddf8021

.AUTHOR Joel 'Jaykul' Bennett

.COMPANYNAME PoshCode

.COPYRIGHT Copyright 2019, Joel Bennett

.TAGS Install Modules Development ModuleBuilder

.LICENSEURI https://github.com/PoshCode/ModuleBuilder/blob/master/LICENSE

.PROJECTURI https://github.com/PoshCode/ModuleBuilder/

.ICONURI https://github.com/PoshCode/ModuleBuilder/blobl/resources/images/install.png

.EXTERNALMODULEDEPENDENCIES

.REQUIREDSCRIPTS

.EXTERNALSCRIPTDEPENDENCIES

.RELEASENOTES
    4.0.6 Fix a double -Verbose problem
    4.0.5 Let the -Destination be non-empty (so we don't have to re-download every time)
    4.0.4 Fix PowerShell 5 .Where bug
    4.0.3 Fix module check when using -Destination to force all modules to be in destination
    4.0.2 Fix Remove-Module error
    4.0.1 Add logging outputs
    4.0.0 Breaking change: require the -Destination to start empty (allow -CleanDestination to clear it)
          Fix for adding the destination to PSModulePath multiple times
          Started testing this so I can ship it to PowerShellGet
    3.0.0 Breaking change: switch -SkipImport to -Import -- inverting the logic to NOT import by default
          Add -Destination parameter to support installing in a local tool path
    2.0.1 Squash mistaken "InstallError" message caused by Select-Object -First
          Clean up output that was unexpected
    2.0.0 Breaking change: use NuGetVersion to support wildcards like 3.*
          Improve the error messages around aborted or failed installs
    1.0.1 Fix "Version '3.4.0' of module 'Pester' is already installed"
    1.0.0 This is the first public release - it probably doesn't work right

.PRIVATEDATA

#>

<#
.SYNOPSIS
    Installs (and imports) modules listed in RequiredModules.psd1
.DESCRIPTION
    Parses a RequiredModules.psd1 listing modules and attempts to import those modules.
    If it can't find the module in the PSModulePath, attempts to install it from PowerShellGet.

    The RequiredModules list looks like this (uses nuget version range syntax):
    @{
        "PowerShellGet" = "2.0.4"
        "Configuration" = "[1.3.1,2.0)"
        "Pester"        = "[4.4.2,4.7.0]"
    }

    https://docs.microsoft.com/en-us/nuget/reference/package-versioning#version-ranges-and-wildcards

.EXAMPLE
    Install-RequiredModule

    Runs the install interactively:
    - reads the default 'RequiredModules.psd1' from the current folder
    - prompts for each module that needs to be installed
.EXAMPLE
    Save-Script Install-RequiredModule -Path .
    ./Install-RequiredModule.ps1 -Path ./RequiredModules.psd1 -Confirm:$false

    This example shows how to use this in a build where you're downloading the script
    and then running it in automation (without "confirm" prompting)
#>
using namespace NuGet.Versioning
using namespace Microsoft.PowerShell.Commands
# NOTE: Requires -Module PowerShellGet is missing here because we assume the version included in PowerShell 5+ is good enough
#       If you need a higher version (which you very well may) you should put that at the top of your RequiredModules manifest

[CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact="High")]
param(
    # The path to a metadata file listing required modules. Defaults to "RequiredModules.psd1" (in the current working directory).
    [Parameter(Position = 0)]
    [Alias("Path")]
    [string]$RequiredModulesFile = "RequiredModules.psd1",

    # If set, the local tools Destination path will be cleared and recreated
    [Parameter(ParameterSetName = "LocalTools")]
    [Switch]$CleanDestination,

    # If set, saves the modules to a local path rather than installing them to the scope
    [Parameter(ParameterSetName="LocalTools", Position = 0)]
    [string]$Destination,

    # The scope in which to install the modules (defaults to "CurrentUser")
    [ValidateSet("CurrentUser", "AllUsers")]
    $Scope = "CurrentUser",

    # Suppress normal host information output
    [Switch]$Quiet,

    # If set, the modules are download or installed but not imported
    [Switch]$Import
)

begin {
    [string[]]$InfoTags = @("Install")
    if (!$Quiet) {
        [string[]]$InfoTags += "PSHOST"
    }
    Write-Progress "Installing Required Modules from $RequiredModulesFile" -Id 0
    # we use this little hack to ensure NuGet types are available
    if (-not ("NuGet.Versioning.VersionRange" -as [Type])) {
        $EncodedCompressedFile = ''

        $UncompressedFileBytes = [byte[]]::new(52488)
        $DeflatedStream = [System.IO.Compression.DeflateStream]::new(
            [IO.MemoryStream][Convert]::FromBase64String($EncodedCompressedFile),
            [IO.Compression.CompressionMode]::Decompress)
        $null = $DeflatedStream.Read($UncompressedFileBytes, 0, 52488)
        $null = [Reflection.Assembly]::Load($UncompressedFileBytes)

    }

    filter GetModuleVersion {
        # PowerShell does the wrong thing with MaximumVersion so we get all versions and check them
        [CmdletBinding()]param(
            [AllowNull()][string]$Destination,
            [Parameter(ValueFromPipelineByPropertyName, Mandatory)][string]$Name,
            [Parameter(ValueFromPipelineByPropertyName, Mandatory)][VersionRange]$Version
        )
        Write-Progress "Searching PSModulePath for '$Name' module with version '$Version'" -Id 1 -ParentId 0
        Write-Verbose "Searching PSModulePath for '$Name' module with version '$Version'"
        $Found = @(Get-Module $Name -ListAvailable -Verbose:$false).Where({
                    (!$Destination -or $_.ModuleBase.ToUpperInvariant().StartsWith($Destination.ToUpperInvariant())) -and
                    (
                        ($Version.Float -and $Version.Float.Satisfies($_.Version.ToString())) -or
                        (!$Version.Float -and $Version.Satisfies($_.Version.ToString()))
                    )
                    # Get returns modules in PSModulePath and then Version order, you're not necessarily getting the highest valid version
                }, "First", 1)
        if (-not $Found) {
            Write-Warning "Unable to find module '$Name' installed with version '$Version'"
        } else {
            Write-Verbose "Found '$Name' installed already with version '$($Found.Version)'"
            $Found
        }
    }

    filter FindModuleVersion {
        # PowerShellGet also does the wrong thing with MaximumVersion so we get all versions and check them
        [CmdletBinding()]param(
            [Parameter(ValueFromPipelineByPropertyName, Mandatory)][string]$Name,
            [Parameter(ValueFromPipelineByPropertyName, Mandatory)][VersionRange]$Version
        )
        Write-Progress "Searching PSRepository for '$Name' module with version '$Version'" -Id 1 -ParentId 0
        Write-Verbose "Searching PSRepository for '$Name' module with version '$Version'"

        $Found = @(Find-Module -Name $Name -AllVersions -Verbose:$false ).Where({
                    ($Version.Float -and $Version.Float.Satisfies($_.Version.ToString())) -or
                    (!$Version.Float -and $Version.Satisfies($_.Version.ToString()))
                }, "First", 1)

        if (-not $Found) {
            Write-Warning "Unable to resolve dependency '$Name' with version '$Version'"
        } else {
            Write-Verbose "Found '$Name' to install with version '$($Found.Version)'"
            $Found
        }
    }

    function ImportRequiredModulesFile {
        # Load a requirements file
        [CmdletBinding()]param(
            $RequiredModulesFile
        )

        $RequiredModulesFile = Convert-Path $RequiredModulesFile
        Write-Progress "Loading Required Module list from '$RequiredModulesFile'" -Id 1 -ParentId 0
        Write-Verbose "Loading Required Module list from '$RequiredModulesFile'"
        $LocalizedData = @{
            BaseDirectory = [IO.Path]::GetDirectoryName($RequiredModulesFile)
            FileName = [IO.Path]::GetFileNameWithoutExtension($RequiredModulesFile)
        }
        (Import-LocalizedData @LocalizedData).GetEnumerator().ForEach({
            [PSCustomObject]@{
                Name = $_.Key
                Version = [VersionRange]$_.Value
            }
        })
    }

    filter InstallModuleVersion {
        [CmdletBinding()]param(
            [AllowNull()][string]$Destination,
            [Parameter(ValueFromPipelineByPropertyName, Mandatory)][string]$Name,
            [Parameter(ValueFromPipelineByPropertyName, Mandatory)][string]$Version # This has to stay [string]
        )
        Write-Progress "Installing module '$($Name)' with version '$($Version)' from the PSGallery"
        Write-Verbose "Installing module '$($Name)' with version '$($Version)' from the PSGallery"
        if ($Destination) {
            Save-Module -Name $Name -RequiredVersion $Version -Path $Destination -ErrorAction Stop -Verbose:($VerbosePreference -eq "Continue")
        } else {
            $Preferences = @{
                Verbose            = $VerbosePreference -eq "Continue"
                Confirm            = $ConfirmPreference -ne "None"
                Scope              = $Scope
                Repository         = "PSGallery"
                SkipPublisherCheck = $true
                AllowClobber       = $true
                RequiredVersion    = $Version
                Name               = $Name
            }

            # Install missing modules with -AllowClobber and -SkipPublisherCheck because PowerShellGet requires both
            Install-Module @Preferences -ErrorAction Stop
        }

        if (GetModuleVersion @PSBoundParameters -WarningAction SilentlyContinue) {
            $PSCmdlet.WriteInformation("Installed module '$($Name)' with version '$($Version)' from the PSGallery", $InfoTags)
        } else {
            $PSCmdlet.WriteError(
                [System.Management.Automation.ErrorRecord]::new(
                    [Exception]::new("Failed to install module '$($Name)' with version '$($Version)' from the PSGallery"),
                    "InstallModuleDidnt",
                    "NotInstalled", $module))
        }
    }

    function Install-RequiredModule {
        [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "High")]
        param(
            # The path to a metadata file listing required modules. Defaults to "RequiredModules.psd1" (in the current working directory).
            [Parameter(Position = 0)]
            [Alias("Path")]
            [string]$RequiredModulesFile = "RequiredModules.psd1",


            # If set, the local tools Destination path will be cleared and recreated
            [Parameter(ParameterSetName = "LocalTools")]
            [Switch]$CleanDestination,

            # If set, saves the modules to a local path rather than installing them to the scope
            [Parameter(ParameterSetName = "LocalTools", Position = 0)]
            [string]$Destination,

            # The scope in which to install the modules (defaults to "CurrentUser")
            [ValidateSet("CurrentUser", "AllUsers")]
            $Scope = "CurrentUser",

            # Suppress normal host information output
            [Switch]$Quiet,

            # If set, the modules are download or installed but not imported
            [Switch]$Import
        )

        if (-Not (Test-Path $RequiredModulesFile -PathType Leaf)) {
            $PSCmdlet.WriteError(
                [System.Management.Automation.ErrorRecord]::new(
                    [Exception]::new("RequiredModules file '$($RequiredModulesFile)' not found."),
                    "RequiredModules.psd1 Not Found",
                    "ResourceUnavailable", $RequiredModulesFile))
            return
        }

        if ($Destination) {
            if (-not (Test-Path $Destination -PathType Container)) {
                New-Item $Destination -ItemType Directory -ErrorAction Stop
                Write-Verbose "Created Destination directory: $(Convert-Path $Destination)"
            }
            # if (-not $CleanDestination) {
            #     if (Get-ChildItem $Destination) {
            #         $PSCmdlet.WriteError(
            #             [System.Management.Automation.ErrorRecord]::new(
            #                 [Exception]::new("Destination folder '$($Destination)' not empty."),
            #                 "Destination Not Empty",
            #                 "ResourceUnavailable", $Destination))
            #         return
            #     }
            # }
            if ($CleanDestination -and (Get-ChildItem $Destination)) {
                Write-Warning "CleanDestination specified: Removing $($Destination) and all it's children:"
                try {
                    Remove-Item $Destination -Recurse -ErrorAction Stop # No -Force -- if this fails, you should handle it yourself
                    New-Item $Destination -ItemType Directory
                } catch {
                    $PSCmdlet.WriteError(
                        [System.Management.Automation.ErrorRecord]::new(
                            [Exception]::new("Failed to clean destination folder '$($Destination)'"),
                            "Destination Cannot Be Emptied",
                            "ResourceUnavailable", $Destination))
                    return
                }
            }
        }

        Write-Progress "Verifying PSRepository trust" -Id 1 -ParentId 0

        # Force Policy to Trusted so we can install without prompts and without -Force which is bad
        # TODO: Add support for all registered PSRepositories
        if ('Trusted' -ne ($Policy = (Get-PSRepository PSGallery).InstallationPolicy)) {
            Write-Verbose "Setting PSGallery Trusted"
            Set-PSRepository PSGallery -InstallationPolicy Trusted
        }

        if ($Destination) {
            # make sure we don't do this multiple times
            $RealDestination = Convert-Path $Destination
            if (-not (@($Env:PSModulePath.Split([IO.Path]::PathSeparator)) -contains $RealDestination)) {
                Write-Verbose "Adding $($RealDestination) to PSModulePath"
                $Env:PSModulePath = $RealDestination + [IO.Path]::PathSeparator + $Env:PSModulePath
            }
        }

        try {
            ImportRequiredModulesFile $RequiredModulesFile -OV Modules |
                Where-Object { -not ($_ | GetModuleVersion -Destination:$RealDestination -WarningAction SilentlyContinue) } |
                FindModuleVersion |
                InstallModuleVersion -Destination:$RealDestination -ErrorVariable InstallErrors
        } finally {
            # Put Policy back so we don't needlessly change environments permanently
            if ('Trusted' -ne $Policy) {
                Write-Verbose "Setting PSGallery Untrusted"
                Set-PSRepository PSGallery -InstallationPolicy $Policy
            }
        }
        Write-Progress "Importing Modules" -Id 1 -ParentId 0
        Write-Verbose "Importing Modules"

        if ($Import) {
            Remove-Module $Modules.Name -Force -ErrorAction Ignore
            $Modules | GetModuleVersion -OV InstalledModules | Import-Module -Passthru:(!$Quiet) -Verbose:$false
        } elseif ($InstallErrors) {
            Write-Warning "Module import skipped because of errors. `nSee error details in `$IRM_InstallErrors`nSee required modules in `$IRM_RequiredModules`nSee installed modules in `$IRM_InstalledModules"
            $global:IRM_InstallErrors = $InstallErrors
            $global:IRM_RequiredModules = $Modules
            $global:IRM_InstalledModules = $InstalledModules
        } else {
            Write-Warning "Module import skipped"
        }

        Write-Progress "Done" -Id 0 -Completed
    }
}
end {
    Install-RequiredModule @PSBoundParameters
}

# SIG # Begin signature block
# MIIXzgYJKoZIhvcNAQcCoIIXvzCCF7sCAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUijp1YHfEj0+zFF31DzMGsOEH
# a6+gghMBMIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8OzANBgkqhkiG9w0B
# AQUFADCBizELMAkGA1UEBhMCWkExFTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIG
# A1UEBxMLRHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsGA1UECxMUVGhh
# d3RlIENlcnRpZmljYXRpb24xHzAdBgNVBAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcg
# Q0EwHhcNMTIxMjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYDVQQGEwJV
# UzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9yYXRpb24xMDAuBgNVBAMTJ1N5bWFu
# dGVjIFRpbWUgU3RhbXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZIhvcN
# AQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrYJXmRIlcqb9y4JsRDc2vCvy5Q
# WvsUwnaOQwElQ7Sh4kX06Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
# i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+JzueZ5/6M4lc/PcaS3Er4
# ezPkeQr78HWIQZz/xQNRmarXbJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3
# +3R8J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrlDqcsn6plINPYlujI
# fKVOSET/GeJEB5IL12iEgF1qeGRFzWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAd
# BgNVHQ4EFgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUHAQEEJjAkMCIG
# CCsGAQUFBzABhhZodHRwOi8vb2NzcC50aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYB
# Af8CAQAwPwYDVR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUuY29tL1Ro
# YXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNVHSUEDDAKBggrBgEFBQcDCDAOBgNV
# HQ8BAf8EBAMCAQYwKAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFtcC0y
# MDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nvf1kwqu9otfrjCR27T4IGXTdf
# plKfFo3qHJIJRG71betYfDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
# 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq3dlXPx13SYcqFgZepjhq
# IhKjURmDfrYwggSjMIIDi6ADAgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3
# DQEBBQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1hbnRlYyBDb3Jwb3Jh
# dGlvbjEwMC4GA1UEAxMnU3ltYW50ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBD
# QSAtIEcyMB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVowYjELMAkGA1UE
# BhMCVVMxHTAbBgNVBAoTFFN5bWFudGVjIENvcnBvcmF0aW9uMTQwMgYDVQQDEytT
# eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0MIIBIjAN
# BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAomMLOUS4uyOnREm7Dv+h8GEKU5Ow
# mNutLA9KxW7/hjxTVQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf2Gi0
# jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh3WPVF4kyW7BemVqonShQDhfu
# ltthO0VRHc8SVguSR/yrrvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
# d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsyi1aLM73ZY8hJnTrFxeoz
# C9Lxoxv0i77Zs1eLO94Ep3oisiSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQAB
# o4IBVzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAKBggrBgEFBQcDCDAO
# BgNVHQ8BAf8EBAMCB4AwcwYIKwYBBQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRw
# Oi8vdHMtb2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKGK2h0dHA6Ly90
# cy1haWEud3Muc3ltYW50ZWMuY29tL3Rzcy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAx
# oC+gLYYraHR0cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNhLWcyLmNy
# bDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQVGltZVN0YW1wLTIwNDgtMjAdBgNV
# HQ4EFgQURsZpow5KFB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzMzHSa
# 1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEBAHg7tJEqAEzwj2IwN3ijhCcH
# bxiy3iXcoNSUA6qGTiWfmkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
# BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1zSgEIKOq8UvEiCmRDoDR
# EfzdXHZuT14ORUZBbg2w6jiasTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IW
# yhOBbQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4axgohd8D20UaF5Mysu
# e7ncIAkTcetqGVvP6KUwVyyJST+5z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUw
# ggUwMIIEGKADAgECAhAECRgbX9W7ZnVTQ7VvlVAIMA0GCSqGSIb3DQEBCwUAMGUx
# CzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3
# dy5kaWdpY2VydC5jb20xJDAiBgNVBAMTG0RpZ2lDZXJ0IEFzc3VyZWQgSUQgUm9v
# dCBDQTAeFw0xMzEwMjIxMjAwMDBaFw0yODEwMjIxMjAwMDBaMHIxCzAJBgNVBAYT
# AlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2Vy
# dC5jb20xMTAvBgNVBAMTKERpZ2lDZXJ0IFNIQTIgQXNzdXJlZCBJRCBDb2RlIFNp
# Z25pbmcgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQD407Mcfw4R
# r2d3B9MLMUkZz9D7RZmxOttE9X/lqJ3bMtdx6nadBS63j/qSQ8Cl+YnUNxnXtqrw
# nIal2CWsDnkoOn7p0WfTxvspJ8fTeyOU5JEjlpB3gvmhhCNmElQzUHSxKCa7JGnC
# wlLyFGeKiUXULaGj6YgsIJWuHEqHCN8M9eJNYBi+qsSyrnAxZjNxPqxwoqvOf+l8
# y5Kh5TsxHM/q8grkV7tKtel05iv+bMt+dDk2DZDv5LVOpKnqagqrhPOsZ061xPeM
# 0SAlI+sIZD5SlsHyDxL0xY4PwaLoLFH3c7y9hbFig3NBggfkOItqcyDQD2RzPJ6f
# pjOp/RnfJZPRAgMBAAGjggHNMIIByTASBgNVHRMBAf8ECDAGAQH/AgEAMA4GA1Ud
# DwEB/wQEAwIBhjATBgNVHSUEDDAKBggrBgEFBQcDAzB5BggrBgEFBQcBAQRtMGsw
# JAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBDBggrBgEFBQcw
# AoY3aHR0cDovL2NhY2VydHMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0QXNzdXJlZElE
# Um9vdENBLmNydDCBgQYDVR0fBHoweDA6oDigNoY0aHR0cDovL2NybDQuZGlnaWNl
# cnQuY29tL0RpZ2lDZXJ0QXNzdXJlZElEUm9vdENBLmNybDA6oDigNoY0aHR0cDov
# L2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0QXNzdXJlZElEUm9vdENBLmNybDBP
# BgNVHSAESDBGMDgGCmCGSAGG/WwAAgQwKjAoBggrBgEFBQcCARYcaHR0cHM6Ly93
# d3cuZGlnaWNlcnQuY29tL0NQUzAKBghghkgBhv1sAzAdBgNVHQ4EFgQUWsS5eyoK
# o6XqcQPAYPkt9mV1DlgwHwYDVR0jBBgwFoAUReuir/SSy4IxLVGLp6chnfNtyA8w
# DQYJKoZIhvcNAQELBQADggEBAD7sDVoks/Mi0RXILHwlKXaoHV0cLToaxO8wYdd+
# C2D9wz0PxK+L/e8q3yBVN7Dh9tGSdQ9RtG6ljlriXiSBThCk7j9xjmMOE0ut119E
# efM2FAaK95xGTlz/kLEbBw6RFfu6r7VRwo0kriTGxycqoSkoGjpxKAI8LpGjwCUR
# 4pwUR6F6aGivm6dcIFzZcbEMj7uo+MUSaJ/PQMtARKUT8OZkDCUIQjKyNookAv4v
# cn4c10lFluhZHen6dGRrsutmQ9qzsIzV6Q3d9gEgzpkxYz0IGhizgZtPxpMQBvwH
# gfqL2vmCSfdibqFT+hKUGIUukpHqaGxEMrJmoecYpJpkUe8wggUwMIIEGKADAgEC
# AhALDZkX0sdOvwJhwzQTbV+7MA0GCSqGSIb3DQEBCwUAMHIxCzAJBgNVBAYTAlVT
# MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j
# b20xMTAvBgNVBAMTKERpZ2lDZXJ0IFNIQTIgQXNzdXJlZCBJRCBDb2RlIFNpZ25p
# bmcgQ0EwHhcNMTgwNzEyMDAwMDAwWhcNMTkwNzE2MTIwMDAwWjBtMQswCQYDVQQG
# EwJVUzERMA8GA1UECBMITmV3IFlvcmsxFzAVBgNVBAcTDldlc3QgSGVucmlldHRh
# MRgwFgYDVQQKEw9Kb2VsIEguIEJlbm5ldHQxGDAWBgNVBAMTD0pvZWwgSC4gQmVu
# bmV0dDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMJb3Cf3n+/pFJiO
# hQqN5m54FpyIktMRWe5VyF8465BnAtzw3ivMyN+3k8IoXQhMxpCsY1TJbLyydNR2
# QzwEEtGfcTVnlAJdFFlBsgIdK43waaML5EG7tzNJKhHQDiN9bVhLPTXrit80eCTI
# RpOA7435oVG8erDpxhJUK364myUrmSyF9SbUX7uE09CJJgtB7vqetl4G+1j+iFDN
# Xi3bu1BFMWJp+TtICM+Zc5Wb+ZaYAE6V8t5GCyH1nlAI3cPjqVm8y5NoynZTfOhV
# bHiV0QI2K5WrBBboR0q6nd4cy6NJ8u5axi6CdUhnDMH20NN2I0v+2MBkgLAzxPrX
# kjnaEGECAwEAAaOCAcUwggHBMB8GA1UdIwQYMBaAFFrEuXsqCqOl6nEDwGD5LfZl
# dQ5YMB0GA1UdDgQWBBTiwur/NVanABEKwjZDB3g6SZN1mTAOBgNVHQ8BAf8EBAMC
# B4AwEwYDVR0lBAwwCgYIKwYBBQUHAwMwdwYDVR0fBHAwbjA1oDOgMYYvaHR0cDov
# L2NybDMuZGlnaWNlcnQuY29tL3NoYTItYXNzdXJlZC1jcy1nMS5jcmwwNaAzoDGG
# L2h0dHA6Ly9jcmw0LmRpZ2ljZXJ0LmNvbS9zaGEyLWFzc3VyZWQtY3MtZzEuY3Js
# MEwGA1UdIARFMEMwNwYJYIZIAYb9bAMBMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8v
# d3d3LmRpZ2ljZXJ0LmNvbS9DUFMwCAYGZ4EMAQQBMIGEBggrBgEFBQcBAQR4MHYw
# JAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBOBggrBgEFBQcw
# AoZCaHR0cDovL2NhY2VydHMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0U0hBMkFzc3Vy
# ZWRJRENvZGVTaWduaW5nQ0EuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
# BQADggEBADNNHuRAdX0ddONqaUf3H3pwa1K016C02P90xDIyMvw+hiUb4Z/xewnY
# jyplspD0NQB9ca2pnNIy1KwjJryRgq8gl3epSiWTbViVn6VDK2h0JXm54H6hczQ8
# sEshCW53znNVUUUfxGsVM9kMcwITHYftciW0J+SsGcfuuAIuF1g47KQXKWOMcUQl
# yrP5t0ywotTVcg/1HWAPFE0V0sFy+Or4n81+BWXOLaCXIeeryLYncAVUBT1DI6lk
# peRUj/99kkn+hz1q4hHTtfNpMTOApP64EEFGKICKkJdvhs1PjtGa+QdAkhcInTxk
# t/hIJPUb1nO4CsKp1gaVsRkkbcStJ2kxggQ3MIIEMwIBATCBhjByMQswCQYDVQQG
# EwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNl
# cnQuY29tMTEwLwYDVQQDEyhEaWdpQ2VydCBTSEEyIEFzc3VyZWQgSUQgQ29kZSBT
# aWduaW5nIENBAhALDZkX0sdOvwJhwzQTbV+7MAkGBSsOAwIaBQCgeDAYBgorBgEE
# AYI3AgEMMQowCKACgAChAoAAMBkGCSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwG
# CisGAQQBgjcCAQsxDjAMBgorBgEEAYI3AgEVMCMGCSqGSIb3DQEJBDEWBBQH47JM
# nmMgMEG5RR6GiMIvoeaWJzANBgkqhkiG9w0BAQEFAASCAQDCPYvb9TZv2XzKsNky
# arKMwHRFzfch90d/CxOYu8+gFU2za1TK1eDzzr/nTpw44XFElHNu3QmAvbHJLRfm
# hjoZch5XNZjFi6OZg4aQOmzyMEXvF8BrJokygSQob+2dPYHm2FIJOwYruqlx0ebi
# WgLr5jI+Y8L7I4O3rWjNE1QtsBYrsDQm3SQxWZWH5Dq0fPFE9Zfeec2jbyZU/hLy
# zwk6HhmYrSQUF3PQdrDm0cSHwbt0cyX/ryg9Coqo4SWueTKWiDXnte6BsEsQ3Zn6
# SSOsfTBHy5Q0vEehGA6fWkj/0dJrVpum33BT9FO4DT2X8tX9AojSAMuDOMvkXOep
# Qg+noYICCzCCAgcGCSqGSIb3DQEJBjGCAfgwggH0AgEBMHIwXjELMAkGA1UEBhMC
# VVMxHTAbBgNVBAoTFFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydTeW1h
# bnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIENBIC0gRzICEA7P9DjI/r81bgTY
# apgbGlAwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJ
# KoZIhvcNAQkFMQ8XDTE5MDYwNDIwMjAwMVowIwYJKoZIhvcNAQkEMRYEFEjIwDZR
# oxfOs9bJ84b3DLXa5vMeMA0GCSqGSIb3DQEBAQUABIIBAG8hfFzM3VtkUVGSIMU3
# IDNSvFbjC+fkx0EYvhZTDByaC7qwXZsHoVsv6mckyZ197mV1T+WFIFDtF4Uq6wwn
# jMIu19hf888i+LdH1vRPRK7MfmV/k2AHiXsxjqkTMexRW8BNEnW3wz9Q7+fMz3xQ
# MoMtVIhM+n+QAPtazhfJ+q3UatfU7eU2vWin0uNHbt1kPQlpJJ/T3iGaLfyG+Dbm
# TYcIwxU9AvT3AmX8KQLLoeJTcE0LVjdn3QBzgAkfpR1wu+ont4hVVpZAt7smAZLx
# p4yLu0sge7e4WX5WBAy+psEuzTzUMW66M6R104EIxwv65i7ftDAg/qrV9jqfZW3j
# mFQ=
# SIG # End signature block
